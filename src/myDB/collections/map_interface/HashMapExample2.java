package myDB.collections.map_interface;

import java.util.HashMap;
import java.util.Map;

public class HashMapExample2 {
    /* При создании HashMap мы можем задать 2 параметра, которые значительно влияют на производительность:
    *  initial capacity - начальный размер массива
    *  load factor - коэффициент того, на сколько массив должен быть заполнен, после чего его размер будет увеличен в двое*/
    public static void main(String[] args) {

        Map<Integer, String> map1 = new HashMap<>(16, 0.75f); // 16 и 0,75 - дефолтные значения

//        loadFactor - означает, что после того как в наш массив будет добавлено 12 элементов(16*0,75) вместимость
//        массива увеличится в двое, а все его элементы будут заново рехэшированы. Чем больше мы будем указывать
//        capacity, тем меньшие по размеру линкедлисты будут находиться в ячейках и поиск будет происходить быстрее,
//        т.е. можно пожертвовать памятью, но выиграем в поиске. Чем больше будем указывать loadFactor, тем больше
//        будем экономить в памяти(проигрывая во времени поиска), но в большинстве случаев его не меняют и оставляют
//        дефолтное значение в 0,75
//        Для того, чтобы вставить или получить элемент, на это уходит константное время О(1). Самая время затратная
//        операция - это прохождение по линкед листу в ячейке O(n), поэтому при достижении определенного размера
//        линкедлист трансфармируется в сбалансированное дерево, а скорость поиска в нем O(log n), а принцип поиска
//        схож с бинарным поиском из-за особенности структуры дерева. Очень важно в качестве ключа использовать
//        имутабельные объекты. Потому что если объект изменился, то и хэшкод его изменился и мы уже не сможем найти
//        значение по ключу.

        Map<Student, Double> map2 = new HashMap<>();
        Student st1 = new Student("zaur", "tregulov", 3);
        Student st2 = new Student("mariya", "ivaniva", 1);
        Student st3 = new Student("Sergey", "petrov", 4);
        map2.put(st1, 7.5);
        map2.put(st2, 8.7);
        map2.put(st3, 9.2);
        System.out.println(map2);
    }
}
